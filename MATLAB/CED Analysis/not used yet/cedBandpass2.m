function filtered_data = cedBandpass2(analog_data)
%cedBandpass1 Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.0 and the DSP System Toolbox 9.2.
% Generated on: 10-Apr-2017 19:41:56

Fs = 1000;                                  % sampling rate
fc = 20;                                    % Cut off frequency 20 Hz
Wn_highpass = (2/Fs)*(0.1);                 % Normalizes highpass lowerbound
Wn_lowpass = (2/Fs)*fc; %500*20             % Normalize the frequency for use in fir1 function (radians)
Wn = [Wn_highpass, Wn_lowpass];
% b = fir1(20,Wn,'low',kaiser(21,3));         % the filter
b = fir1(20,Wn,'bandpass',kaiser(21,3));         % the filter

fvtool(b,1,'Fs',Fs)

filtered_data = filter(b,1,analog_data);    % y = filter(B,A,X) filters the data in vector X with the
%                       filter described by vectors A and B to create the filtered
%                       data Y.  The filter is a "Direct Form II Transposed"
%                       implementation of the standard difference equation:

% plot(t,DLS_ave,t,y)         % plots the unfiltered and filtered data together
% figure,
% subplot(2,1,1)
% plot(analog_data)
% xlabel('Time (s)')
% ylabel('Amplitude')
% legend('Original Signal')
% 
% subplot(2,1,2)
% plot(filtered_data)
% xlabel('Time (s)')
% ylabel('Amplitude')
% legend('Filtered Data')

end